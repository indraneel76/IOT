#include <SoftwareSerial.h>

#define DEBUG true

SoftwareSerial esp8266(2,3); // make RX Arduino line is pin 2, make TX Arduino line is pin 3.
// This means that you need to connect the TX line from the esp to the Arduino's pin 2
// and the RX line from the esp to the Arduino's pin 3


int motionPin=8;
int pirState=LOW; // we start , assuming no motion is detected
  int calibrationTime = 5;   

void setup(){
  Serial.begin(9600);
 
  pinMode(motionPin,INPUT);
   digitalWrite(motionPin, LOW);

  //give the sensor some time to calibrate
  Serial.print("calibrating sensor ");
    for(int i = 0; i < calibrationTime; i++){
      Serial.print(".");
      delay(1000);
      }
    Serial.println(" done");
    Serial.println("SENSOR ACTIVE");
    delay(50);
  
}

void loop()
{
Serial.begin(115200);
esp8266.begin(115200); // your esp's baud rate might be different
sendData("AT+RST\r\n",5000,DEBUG); // reset module
sendData("AT+CWMODE=1\r\n",5000,DEBUG); // configure as access point
sendData("AT+CWJAP=\"<SSID>\",\"<password>\"\r\n",3000,DEBUG);

sendData("AT+CIFSR\r\n",5000,DEBUG); // get ip address

//Serial.println("Start of operation") ;
sendData("AT+CIPSTART=\"TCP\",\"hostname\",80\r\n",10000,DEBUG);
sendData("AT+CIPSEND=72\r\n",5000,DEBUG);

String sendcommand = "GET http://hostname/r/m/";

String isMotion=senseMotion();
sendcommand.concat(isMotion);
sendcommand.concat(" HTTP/1.1\r\n\r\n\r\n");
Serial.println(sendcommand) ; 
//Serial.print(sendcommand.length());

String resp=sendData(sendcommand,5000,DEBUG);
//Serial.println("http response start") ;
Serial.println(resp);
//Serial.println("http response stop") ;


sendData("AT+CIPCLOSE\r\n",10000,DEBUG) ;
Serial.println("completed operation") ;
delay(5000) ;  
}




String senseMotion()
{
int motionCount=0;
for (int i =0 ;i<60 ;i++)
{

if(digitalRead(motionPin) == HIGH){

 
         motionCount++;
  
}

delay(1000);
  }

  return String(motionCount);

}


String sendData(String command, const int timeout, boolean debug)
{
String response = "";

esp8266.print(command); // send the read character to the esp8266

long int time = millis();

while( (time+timeout) > millis())
{
while(esp8266.available())
{

// The esp has data so display its output to the serial window 
char c = esp8266.read(); // read the next character.
response+=c;
} 
}

if(debug)
{
Serial.print(response);
}

return response;
}



